64-bit Uniform Instruction Format Proposal
==========================================

This is a proposal to have a 64-bit instruction that all shorter instructions
can be translated to, such that the internal representation used in a CPU can
be this 64-bit format.

The instruction format is designed for ease of decoding, rather than encoding
density.

Conventions
===========

Conventions used in this document:
- Bits are numbered starting from 0 at the LSB, so bit 3 is 1 in the integer 8.
- Bit ranges are inclusive on both ends, so 5:3 means bits 5, 4, and 3.

Operations work on variable-length vectors of sub-vectors, where each sub-vector
has a length *svlen*, and an element type *etype*. When the vectors are stored
in registers, all elements are packed so that there is no padding in-between
elements of the same vector. The number of bytes in a sub-vector, *svsz*, is the
product of *svlen* and the element size in bytes.

Register Fields
===============

+---------------------+-----------------+
| 7                   | 6:0             |
+=====================+=================+
| Float (1) / Int (0) | Register Number |
+---------------------+-----------------+

Predicate (pred)
================

+-------------------+---------------------------+
| 5                 | 4:0                       |
+===================+===========================+
| Matched Bit Value | Predicate Register (preg) |
+-------------------+---------------------------+

+----------+----------------+
| Encoding |                |
+==========+================+
| 000000   | *Unpredicated* |
+----------+----------------+
| 100000   | *Reserved*     |
+----------+----------------+
| 000001   | ``!x1``        |
| \.\.\.   | \.\.\.         |
| 011111   | ``!x31``       |
+----------+----------------+
| 100001   | x1             |
| \.\.\.   | \.\.\.         |
| 111111   | x31            |
+----------+----------------+

Sub-Vector Length (svlen) Field Encoding
========================================

+----------------+-------+
| svlen Encoding | Value |
+================+=======+
| 00             | 4     |
+----------------+-------+
| 01             | 1     |
+----------------+-------+
| 10             | 2     |
+----------------+-------+
| 11             | 3     |
+----------------+-------+

Sub-Vector Element Type (svet) Field Encoding
=============================================

Encoding chosen for ease of decoding

+-----------------+----------------------------------+
| svet Encoding   | Value                            |
+=================+==================================+
| 0000            | u8                               |
+-----------------+----------------------------------+
| 0001            | u16                              |
+-----------------+----------------------------------+
| 0010            | u32                              |
+-----------------+----------------------------------+
| 0011            | u64                              |
+-----------------+----------------------------------+
| 0100            | i8                               |
+-----------------+----------------------------------+
| 0101            | i16                              |
+-----------------+----------------------------------+
| 0110            | i32                              |
+-----------------+----------------------------------+
| 0111            | i64                              |
+-----------------+----------------------------------+
| 1000            | uXLEN                            |
+-----------------+----------------------------------+
| 1001            | f32                              |
+-----------------+----------------------------------+
| 1010            | *Reserved*                       |
+-----------------+----------------------------------+
| 1011            | f64                              |
+-----------------+----------------------------------+
| 1100            | iXLEN                            |
+-----------------+----------------------------------+
| 1101            | *Reserved* (for f128)            |
+-----------------+----------------------------------+
| 1110            | *Reserved*                       |
+-----------------+----------------------------------+
| 1111            | f16                              |
+-----------------+----------------------------------+

vs#/vd Fields' Encoding
=======================

+--------+----------+----------------------------------------------------------+
| vs#/vd | Mnemonic | Meaning                                                  |
+========+==========+==========================================================+
| 0      | S        | the rs#/rd field specifies a scalar (single sub-vector)  |
+--------+----------+----------------------------------------------------------+
| 1      | V        | the rs#/rd field specifies a vector                      |
+--------+----------+----------------------------------------------------------+

If a vs#/vd field is not present, it is as if it was present with a value that
is the bitwise-or of all present vs#/vd fields.

Instruction Format
==================

All format names are prefixed with UIF64 (Uniform Instruction Format 64-bit).

TODO: sign extend immediate and fix UIF64U format to have 23 immediate bits

+---------+---------+-------+-------+-------+-----+-----+-------+-------+-------+-------+------------+-------+----+------------+--------+-----+---------+
| Format  | 63      | 62:56 | 55:54 | 53:50 | 49  | 48  | 47:46 | 45:40 | 39:32 | 31:29 | 28:24      | 23:16 | 15 | 14:13      | 12:8   | 7   | 6:0     |
+=========+=========+=======+=======+=======+=====+=====+=======+=======+=======+=======+============+=======+====+============+========+=====+=========+
| UIF64R4 | rs3             | 0     | svet  | vs2 | vs1 | svlen | pred  | rs2   | rs1                | rd    | vd | rm         | Opcode | vs3 | 0111111 |
+---------+---------+-------+-------+-------+-----+-----+-------+-------+-------+-------+------------+-------+----+------------+--------+-----+---------+
| UIF64U  | imm[31] | imm[31:22]    | svet  | 0   | 0   | svlen | pred  | 0     | 0     | imm[19:15] | rd    | vd | imm[14:12] | Opcode | 0   | 0111111 |
+---------+---------+-------+-------+-------+-----+-----+-------+-------+-------+-------+------------+-------+----+------------+--------+-----+---------+
